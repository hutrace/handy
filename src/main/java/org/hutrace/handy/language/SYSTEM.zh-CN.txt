serve.language.notfound = 没有在语言包中找到名为'{}'的属性
serve.language.loadapp.errorname = 文件名称有误，格式应该为：xxx.zh-CN.txt（zh-CN为语言，不区分大小写），错误文件：{}
serve.config.notfound = 没有找到配置文件，你需要添加'{}'或者自定义配置文件
serve.config.read = 读取默认的{}配置文件: '{}'
serve.config.custom.notfound = 没有找到定义的配置文件: '{}'
serve.config.type.notfount = 没有找到对应的配置设置器: '{}'，支持'{}'格式的配置文件
serve.config.scan.nothave = 如果添加scan标签，必须添加对应的string标签设置值
serve.config.scan.error = 'scan'属性错误，只能是数组或字符串
serve.config.type.error = 类加载错误，该类'{}'需要实现'{}'接口
serve.config.method.error = 类'{}'下，没有找到对应的方法'{}'
serve.config.method.parameter = 参数类型错误，value只能是简单类型: '{}'#'{}'
serve.config.read.property = property标签必须包含value属性或者bean/str子标签
serve.config.elem.disunion = 标签属性错误，property下的标签必须统一。
serve.config.elem.nonsupport = 不支持的标签类型。
serve.config.read.bean = 属性'{}'下的标签的数量有多个，它应该是list或者数组。
serve.config.cast.list = 使用value标签你只能使用数组接收，不要使用list。
serve.mapping.scan.dao.nothave = 你需要配置使用的CommonDao
serve.config.type.error = 类型错误，类型只能是'String'或'JSON对象'，[{} -> index: {}]
serve.config.class.notfound = 没有找到类: '{}'
serve.config.class.error = 构建类示例错误: '{}'
serve.config.notimpl = '{}'类必须实现'{}'接口
serve.config.pattern.notfound = 没有找到对应的模式(pattern): '{}'
serve.mapping.scan.start = 开始扫描包...
serve.mapping.scan.dao = 开始扫描'DAO' ...
serve.mapping.scan.service = 开始扫描'Service' ...
serve.mapping.scan.control = 开始扫描'Controller' ...
serve.mapping.scan.ws = 开始扫描'WebSocket' ...
serve.mapping.scan.finish = 扫描完成，开始初始化'DAO'、'Service'、'Controller'、'WebSocket'
serve.mapping.debug.control = 控制器接口信息: 
serve.mapping.debug.ws = WebSocket接口信息: 
serve.mapping.scan.dao.error = Class '{}' did not find the 'DAO' annotation
serve.mapping.scan.service.error = 被扫描到的类'{}'必须添加'DAO'和'Service'注解
serve.mapping.scan.control.error =  被扫描到的类'{}'必须添加'Service'注解
serve.mapping.invoke.singleton = 调用方法[{}] -- 单例模式
serve.mapping.invoke.multiton = 调用方法[{}] -- 多例模式
serve.response.flushed = 该通道已经刷新
serve.response.closeed = 该通道已经关闭
serve.request.url = 请求地址：{} [{}]
serve.request.data = {} 请求数据：{}
serve.ws.request.url = WebSocket: 请求事件：{}
serve.ws.request.data = WebSocket: {} 请求数据：{}
serve.ws.close = WebSocket: 有客户端断开连接了, id: [{}]